// Online C++ compiler to run C++ program online

//10 20 40 -1 -1 50 70 110 -1 -1 111 -1 -1 80 -1 -1 30 -1 60 -1 90 112 -1 -1 113 -1 -1
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node *left;
    Node *right;
    
    Node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
        
    }
};

Node *buildTree(){
    int data;
    cout<<"enter the data of root node"<<endl;
    cin>>data; 
    
    if(data==-1){
        return NULL ;
    }
    
    // create a root node
    Node *root=new Node(data);
    cout<<"left of node : "<<root->data<<endl;
    root->left=buildTree();
     cout<<"right of node : "<<root->data<<endl;
    root->right=buildTree();
    return root;
    
}

void inordertraversal(Node* root){
    if(root==NULL){
        return ;
    }
    //5 10 15 -1 -1 -1 20 -1 -1 
    // n
    cout<<root->data<<" ";
   //l
    inordertraversal(root->left);
    // r
    inordertraversal(root->right);
}

void preordertraversal(Node* root){
    if(root==NULL){
        return ;
    }
    //5 10 15 -1 -1 -1 20 -1 -1 
       //l
    preordertraversal(root->left);
    // n
    cout<<root->data<<" ";
 

    // r
    preordertraversal(root->right);
}

void postordertraversal(Node* root){
    if(root==NULL){
        return ;
    }
    //5 10 15 -1 -1 -1 20 -1 -1 
    
   //l
    postordertraversal(root->left);
    // r
    postordertraversal(root->right);
    
    // n
    cout<<root->data<<" ";
}

void levelordertraversal(Node* root){
     queue<Node*>q;
     q.push(root);
     q.push(NULL);
     
     while(!q.empty()){
         Node* front= q.front();
        q.pop();
        
        if(front==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<front->data<<" ";
            
            if(front->left){
                q.push(front->left);
            }
            if(front->right){
                q.push(front->right);
            }
        }
     }
}



void leftview(Node* root,int level,vector<int>&ans){
    if(root==NULL) return;
    
    if(ans.size()==level){
        ans.push_back(root->data);
        
    }
    leftview(root->left,level+1,ans);
    leftview(root->right,level+1,ans);
    
}

void rightview(Node* root,int level,vector<int>&ans2){
    if(root==NULL) return;
    
    if(ans2.size()==level){
        ans2.push_back(root->data);
        
    }
     rightview(root->right,level+1,ans2);
    rightview(root->left,level+1,ans2);
   
    
}

void printLeftview(Node* root){
    map<int,int> hdToNodemap;
    queue<pair<Node*,int>>q;
    q.push(make_pair(root,0));
    
    while(!q.empty()){
        pair<Node*,int> temp=q.front();
        q.pop();
        
        Node* front=temp.first;
        int hd= temp.second;
        
        //agar meri hd p koi value store nhi h toh store kar do 
        if(hdToNodemap.find(hd)==hdToNodemap.end()){
            hdToNodemap[hd]=front->data;
        }
        
        // child ko smabalo
        if(front->left){
            q.push(make_pair(front->left,hd-1));
        }
        if(front->right){
            q.push(make_pair(front->right,hd+1));
        }
    }
    cout<<"printing top view of TREE is : "<<endl;
    for(auto it:hdToNodemap){
        cout<<it.second<<" ";
    }
}

void bottomview(Node* root){
    map<int,int>hdToNodemp;
    queue<pair<Node*,int>>q;
    q.push(make_pair(root,0));
    
    while(!q.empty()){
        pair<Node*,int>temp=q.front();
        q.pop();
        Node* front=temp.first;
        int hd=temp.second;
        
        hdToNodemp[hd]=front->data;
        
        if(front->left){
            q.push(make_pair(front->left,hd-1));
        }
        if(front->right){
            q.push(make_pair(front->right,hd+1));
        }
        
        
    }
    cout<<"Printing bottom view of TREE is : "<<endl;
    for(auto it:hdToNodemp){
        cout<<it.second<<" ";
    }
}
int main() {
    Node *root=buildTree();
   //cout<<root->data<<endl;
   cout<<"printing preorder Traversal"<<endl;
   preordertraversal(root);
  cout<<endl;
  
   cout<<"printing inorder traversal "<<endl;
   inordertraversal(root);
  cout<<endl;
  
   cout<<"printing postorder traversal"<<endl;
   postordertraversal(root);
  cout<<endl;
  
  cout<<"printing level order traversal"<<endl;
   levelordertraversal(root);
  cout<<endl;
  
  vector<int>ans;
  leftview(root,0,ans);
  cout<<"printing the left view of BINARY TREE"<<endl;
  for(int i=0;i<ans.size();i++){
      cout<<ans[i]<<" ";
  }
  
  cout<<endl;
  vector<int>ans2;
  rightview(root,0,ans2);
  cout<<"printing the right view of BINARY TREE"<<endl;
  for(int i=0;i<ans2.size();i++){
      cout<<ans2[i]<<" ";
  }
  
  cout<<endl;
  printLeftview(root);
  
   cout<<endl;
  bottomview(root);
  
    return 0;
}
