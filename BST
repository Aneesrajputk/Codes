// Online C++ compiler to run C++ program online
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
};

Node* insertintoBST(Node* &root,int data){
    if(root==NULL){
        root= new Node(data);
        return root ;
    }
    
    if(data>root->data){
        root->right=insertintoBST(root->right,data);
    }
    else{
        root->left=insertintoBST(root->left,data);
    }
    return root;
}


void createbst(Node* &root){
    cout<<"enter the data"<<endl;
    int data;
    cin>>data;
    
    while(data!=-1){
        insertintoBST(root,data);
        cout<<"enter data"<<endl;
        cin>>data;
    }
 
}
void levelordertraversal(Node* root){
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        Node* front= q.front();
        q.pop();
        
        if(front==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<front->data<<" ";
            if(front->left){
                q.push(front->left);
            }
            if(front->right){
                q.push(front->right);
            }
        }
    }
}
void preordertraversal(Node* root){
    if(root==NULL){
        return ;
    }
    //n
    cout<<root->data<<" ";
    //l
    preordertraversal(root->left);
    //r
    preordertraversal(root->right);
    
}

void inordertraversal(Node* root){
    if(root==NULL){
        return ;
    }
     //l
    inordertraversal(root->left);
    //n
    cout<<root->data<<" ";
   
    //r
    inordertraversal(root->right);
    
}
void postordertraversal(Node* root){
    if(root==NULL){
        return ;
    }
    
    //l
    postordertraversal(root->left);
    //r
    postordertraversal(root->right);
    //n
    cout<<root->data<<" ";
}

Node* minvalue(Node* root){
    if(root==NULL){
        cout<<"NO MINIVALUE"<<endl;
        return NULL;
    }
    
    Node* temp=root;
    while(temp->left!=NULL){
        temp=temp->left;
    }
    return temp;
}



Node* maxvalue(Node* root){
    if(root==NULL){
        cout<<"NO MAXVALUE"<<endl;
        return NULL;
    }
    
    Node* temp=root;
    while(temp->right!=NULL){
        temp=temp->right;
    }
    return temp;
}

bool searchinBST(Node* root,int target){
    // base case 
    if(root==NULL){
        return false;
    }
    // ek case de baki recursion karega 
    if(root->data==target){
        return true;
    }
    
    // recursion ki bari 
    bool leftkaans=false;
    bool rightkaans=false;
    
    if(target>root->data){
        rightkaans=searchinBST(root->right,target);
    }
    else{
        leftkaans=searchinBST(root->left,target);
    }
    
    return leftkaans||rightkaans;
}
int main() {
    Node* root=NULL;
    
    createbst(root);
    
    cout<<endl<<"printing preordertraversal"<<endl;
    preordertraversal(root);
    cout<<endl<<"printing inordertraversal"<<endl;
    inordertraversal(root);
    cout<<endl<<"printing postordertraversal"<<endl;
    postordertraversal(root);
    
     cout<<endl<<"printing levelordertraversal"<<endl;
    levelordertraversal(root);
    cout<<endl;
    
    Node* minNode = minvalue(root);
    if(minNode==NULL){
        cout<<"there is no tree then no max value"<<endl;
    }
    else{
        cout<<"minimum value is : "<<minNode->data<<endl;
    }
    
    Node* maxNode = maxvalue(root);
    if(maxNode==NULL){
        cout<<"there is no tree then no max value"<<endl;
    }
    else{
        cout<<"maximum value is : "<<maxNode->data<<endl;
    }
    
    int t;
    cout<<"enter the target"<<endl;
    cin>>t;
    
    while(t!=-1){
        bool ans=searchinBST(root,t);
        
        if(ans==true){
            cout<<"Target found"<<endl;
        }
        else{
            cout<<"Target Not Found"<<endl;
        }
         cout<<"enter the target"<<endl;
    cin>>t;
        
    }
    
    
    
    return 0;
}
